@model SteamGameListModel
@{
    int achievedCount = Model.UserAchievements.Where(x => x.Achieved).Count();

    double progressWidth = (double)achievedCount / (double)Model.SteamGame.AchievmentCount * 100;

    bool perfect = achievedCount == Model.SteamGame.AchievmentCount;
}

<a asp-action="View" asp-controller="Game" asp-route-id="@Model.SteamGame.ID" class="row link-section">
    <div class="col-auto">
        <img src="@Model.SteamGame.HeaderImageUrl" class="img-fluid d-none d-lg-block" style="max-height:200px;" />
        <img src="@Model.SteamGame.GridThumbUrl" class="img-fluid d-lg-none" style="max-width:100px;" />
    </div>
    <div class="col">
        <div class="display-6 d-none d-lg-block" display-for="SteamGame.Name"></div>
        <h4 class="d-lg-none" display-for="SteamGame.Name"></h4>

        <div class="mb-1">
            <small class="small-caps">Playtime:</small>
            @if (Model.SteamGame.TotalPlaytime == 0) {
                <em class="text-info">Unplayed</em>
            } else {
                @TimeSpan.FromMinutes(Model.SteamGame.TotalPlaytime).ToLongString()
            }

            @if (Model.SteamGame.MetacriticScore > 0) {
                @:|
                <small class="small-caps">Reviews:</small> @Html.DisplayFor(x => x.SteamGame.ReviewDescription)
            }

            @if (Model.SteamGame.RecommendationCount > 0) {
                @:|
                <small class="small-caps">Recommendations:</small> @Html.DisplayFor(x => x.SteamGame.RecommendationCount)
            }

            @if (!perfect && Model.GameDetails?.PerfectPossible != null) {
                @:|
                <small class="small-caps">Perfect Possible:</small> @Html.DisplayFor(x => x.GameDetails.PerfectPossible)
            }
        </div>

        <div>
            <div class="progress" role="progressbar" aria-valuenow="@achievedCount" aria-valuemin="0" aria-valuemax="@Model.SteamGame.AchievmentCount" style="height:1.5rem;">
                <div class="progress-bar @(perfect ? "progress-bar-striped progress-bar-animated" : "")" style="font-size:1.2em;width: @(progressWidth)%;">
                    @Math.Round(progressWidth, 1)%
                </div>
            </div>
        </div>

        @if (Model.Complications.SafeAny()) {
            <div>
                @foreach(Complication comp in Model.Complications.OrderBy(x => x.Name)) {
                    <span class="badge" style="background-color:@comp.BackgroundColor" display-for="@comp.Name"></span>
                }
            </div>
        }
    </div>
</a>

<hr />