@model SteamGameListModel
@{
    int achievedCount = Model.UserAchievements.Where(x => x.Achieved).Count();

    double progressWidth = (double)achievedCount / (double)Model.SteamGame.AchievementCount * 100;

    bool perfect = achievedCount == Model.SteamGame.AchievementCount;
}

<a asp-action="View" asp-controller="Game" asp-route-id="@Model.SteamGame.ID"
   class="row link-section game-list-item border-bottom pt-2 pb-2"
   data-name="@Model.SteamGame.Name"
   data-count="@Model.SteamGame.AchievementCount"
   data-percent="@progressWidth"
   data-playtime="@Model.SteamGame.TotalPlaytime"
   data-review="@Model.SteamGame.ReviewScore"
   data-metacritic="@Model.SteamGame.MetacriticScore"
   data-playnext="@Model.GameDetails?.PlayNextScore">
    <div class="col-auto">
        @if (string.IsNullOrWhiteSpace(Model.SteamGame.HeaderImageUrl)) {
            <img src="https://cdn.cloudflare.steamstatic.com/steam/apps/@Model.SteamGame.ID/header.jpg" class="img-fluid header-img d-none d-lg-block" />
        } else {
            <img src="@Model.SteamGame.HeaderImageUrl" class="img-fluid header-img d-none d-lg-block" />
        }
        <img src="@Model.SteamGame.GridThumbUrl" class="img-fluid d-lg-none" style="max-width:100px;" />
    </div>
    <div class="col">
        <div class="display-6 d-none d-lg-block" display-for="SteamGame.Name"></div>
        <h4 class="d-lg-none" display-for="SteamGame.Name"></h4>

        <div class="mb-1">
            <small class="small-caps">Playtime:</small>
            @if (Model.SteamGame.TotalPlaytime == 0) {
                <em class="text-info">Unplayed</em>
            } else {
                @TimeSpan.FromMinutes(Model.SteamGame.TotalPlaytime).ToLongString()
            }

            @if (Model.GameDetails?.PerfectPossible != null) {
                <span class="text-faded font-weight-semibold">|</span>
                <small class="small-caps">Perfect Possible:</small> @Html.DisplayFor(x => x.GameDetails.PerfectPossible)
            }

            @if (Model.SteamGame.DeckCompatibility != null) {
                <span class="text-faded font-weight-semibold">|</span>
                <small class="small-caps">Deck Compatibility:</small> @Html.DisplayFor(x => x.SteamGame.DeckCompatibility)
            }
        </div>

        @if (Model.SteamGame.AchievementCount > 0) {
            <div class="row">
                <div class="col">
                    <div class="progress" role="progressbar" aria-valuenow="@achievedCount" aria-valuemin="0" aria-valuemax="@Model.SteamGame.AchievementCount" style="height:1.5rem;">
                        <div class="progress-bar @(perfect ? "progress-bar-striped progress-bar-animated" : "")" style="font-size:1.2em;width: @(progressWidth)%;">
                            @Math.Round(progressWidth, 1)%
                        </div>
                    </div>
                </div>
                <div class="col-auto">
                    @achievedCount / @Model.SteamGame.AchievementCount
                </div>
            </div>
        } else {
            <p class="text-center text-faded">
                <em>This game does not have any achievements</em>
            </p>
        }

        @if (!string.IsNullOrWhiteSpace(Model.SteamGame.ReviewDescription)) {
            <small class="small-caps">Review:</small> @Html.DisplayFor(x => x.SteamGame.ReviewDescription)
        }

        @if (!string.IsNullOrWhiteSpace(Model.SteamGame.ReviewDescription) && Model.SteamGame.RecommendationCount > 0) {
            <span class="text-faded font-weight-semibold">|</span>
        }

        @if (Model.SteamGame.RecommendationCount > 0) {
            <small class="small-caps">Recommendations:</small> @Html.DisplayFor(x => x.SteamGame.RecommendationCount)
        }

        @if (Model.SteamGame.MetacriticScore > 0) {
            <span class="text-faded font-weight-semibold">|</span>
            <small class="small-caps">Metacritic:</small> @Html.DisplayFor(x => x.SteamGame.MetacriticScore)
        }

        @if (Model.ComplicationTags.SafeAny()) {
            <div>
                @foreach (Tag tag in Model.ComplicationTags.OrderBy(x => x.Name)) {
                    <span class="badge" style="background-color:@tag.BackgroundColor" display-for="@tag.Name"></span>
                }
            </div>
        }
    </div>
</a>